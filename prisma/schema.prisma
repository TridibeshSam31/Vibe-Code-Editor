// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}


model User {
  id String @id @default(cuid()) @map("_id") //map is necessary for mongodb mogodb stores data in form of id
  name String?
  email String @unique
  image String?
  accounts Account[] //this thing is need for Oauth authentication so we will see the doc and add that
  role UserRole @default(USER) //future purpose 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  myPlaground Playground[]

  

}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

//doing npx prisma db push is not necessary , but yes it's a good practice
//this account and user fields are given in nextauth recent version  i.e auth.js for reference so taken from these 


enum Templates {
REACT
NEXTJS
EXPRESS
VUE
HONO
ANGULAR
}

model Playground {
  id String @id @default(cuid()) @map("_id")
  title String 
  description String?
  template Templates @default(REACT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId String
  user User  @relation(fields:[userId], references: [id] , onDelete: Cascade)


}